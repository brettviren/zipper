#+title: Zipper is streaming priority merge queue

* Algorithms

** Merged queue

A merged queue presents a /priority queue/ that produces an output
/stream/ in guaranteed order by merging \(k\) ordered input streams.

We say a stream is "represented" in the queue if the queue contains at
least one element from the stream (excluding the element at the queue
~top())~.  We say the queue is "complete" if all streams have
representation.

As long as ~top()~ and ~pop()~ are called when the queue is "complete"
then the output ordering is guaranteed.

** Tardy queue

A tardy queue adds to the ordering guarantee of a merged queue a
maximum latency guarantee though necessarily with caveats.  A tardy
queue will be considered "complete" if there are streams that are not
represented and if those streams have failed to provide input for more
than a configurable "sync time".

When the queue is "complete" but possibly lacking "representing" the
caller may use ~top()~ and ~pop()~ to get the next ordered output within
the latency bound.

Subsequent input from streams that were not "represented" may be
ordered "before" prior output elements.  Such input is called "tardy"
and will be dropped as to allow them to enter the queue would assure
the queue output would become unordered.

The "time" used by the tardy queue is provided by the user.  Internal
to the queue no system or other "real time" is considered.  Thus the
latency guarantee here is conceptual and dependent on what "time"
values the caller provides.  In particular, any "real time" used by
the operation of the queue itself, though likely insignificant, is not
included in any latency guarantees.

  






