#+title: Zipper is streaming priority merge queue

* Algorithm

The ~zipper::merge~ class provides k-way merge with a choice between a
maximum latency bounds or guarantee of lossless operation but not
both.

Each of the k-way inputs is called a /stream/ and ~merge~ maintains a
/min-heap priority queue/ of /nodes/.  Each node correlates the following
four pieces of information:

- payload :: a user object
- ordering :: a value by which nodes may be placed in ascending order
- identity :: a value indicating the stream.
- debut :: the "time" which a payload was accepted to the merge

Note, the ordering value is not necessarily itself a time.  

At any given moment of operation, a stream is considered to be
/represented/ in the merge if at least one node from that stream is held
in any location of the queue excluding the /top/ of the min-heap.

The ~merge~ object state is considered /fully complete/ if all of the
k-way streams are represented.  And it is considered /weakly complete/
if at least all /active/ streams are represented.  An active stream is
one that has provided recent data within a duration smaller than the
maximum latency.  Any streams that are not active are called /stale/.

The state of completeness may be used to extract or /drain/ nodes from
the queue in a manner that either achieves the latency bounds or
assure a lossless queue.  When draining for latency bounding, the
queue may drain nodes which are ordered "after" (higher /ordering/
value) than nodes (from other streams) which the user may subsequently
try to feed.  When a node is fed to the ~merge~ which is ordered
"before" (lower /ordering/ value) the last node that has been drained it
will be rejected.  The user is invited to check the Boolean return
value of ~feed()~ to determine if the node was accepted.

